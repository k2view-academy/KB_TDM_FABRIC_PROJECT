tags: UpgradeTDMProject
stages:
  Stage 1:
    actors:
      Set Main Table Name Variable:
        parent: StringFormat
        in:
          format:
            const: ${luName}.ROOT_TABLE_NAME
          luName:
            external: luName
            schema: string
            mandatory: false
      Set Main Table Key:
        parent: StringFormat
        in:
          format:
            const: ${luName}.ROOT_COLUMN_NAME
          luName:
            external: luName
            schema: string
            mandatory: false
  Stage 2:
    actors:
      Get Main TableName:
        parent: FabricSetRead
        in:
          key:
            link: Set Main Table Name Variable/string
      Get Main Table key:
        parent: FabricSetRead
        in:
          key:
            link: Set Main Table Key/string
  Stage 3:
    actors:
      LU Folder:
        parent: StringFormat
        in:
          format:
            const: ${LuFolder}/Tables
          LuFolder:
            external: LuFolder
            schema: string
            mandatory: false
      Pattern:
        parent: StringFormat
        in:
          format:
            const: ${0}.*.flow
          params:
            link:
              path: Get Main TableName/result
              pos: 0
  Stage 4:
    actors:
      ls1:
        parent: ls
        in:
          interface:
            const: null
            link: LU Folder/string
          path:
            const: .
          pattern:
            const: null
            link: Pattern/string
        out:
          result:
            schema: '#ref'
  Stage 5:
    actors:
      FileRead1:
        parent: FileRead
        in:
          interface:
            const: null
            link: LU Folder/string
          path:
            link:
              path: ls1/result/name
              iterate: Iterate
  Stage 6:
    actors:
      JsonParser1:
        parent: JsonParser
        in:
          stream:
            link: FileRead1/stream
        out:
          object:
            schema: '#ref'
  Stage 7:
    actors:
      JsonStringify1:
        parent: JsonStringify
        in:
          object:
            link: JsonParser1/object
  Stage 8:
    actors:
      JavaScript1:
        parent: JavaScript
        in:
          script:
            const:
              userCode: |+
                var objTmp = JSON.parse(objStr);
                var levels = [...objTmp.levels];
                var actorInputs = [];

                var objOut = {};
                var interfaceName = '';
                var schemaName = '';

                for(var i=0; i<levels.length; i++) {

                    var objStage = levels[i].stages;

                    // Find Source stage
                    for(var y=0; y<objStage.length; y++) {
                        print("Stage Name: " + objStage[y].name);
                        if(objStage[y].name=='Source') {
                            for(var a=0; a<objStage[y].actors.length; a++) {
                                print("Actor Type: " + objStage[y].actors[a].actorType.parentType);
                                if(objStage[y].actors[a].actorType.parentType=='SourceDbQuery') {
                                    print("In the right actor");
                                    actorInputs = [...objStage[y].actors[a].actorType.inputs];
                                    for (var j=0; j<actorInputs.length;j++) {
                                        print("Input Param Name: " + actorInputs[j].name);
                                        print("Input Param value: " + actorInputs[j].const);
                                        if (actorInputs[j].name == 'interface') {
                                            interfaceName = actorInputs[j].const;

                                        } else if (actorInputs[j].name == 'sql') {
                                            var select = actorInputs[j].const;
                                            var table = select.match(/(from)\s+(\w+\.\w+)/g) + '';
                                            print("Table before split: " + table);
                                            if (table != null) {
                                                table = table.split(" ")[1];
                                                print("Table: " + table);
                                                if (table != null) {
                                                    var tableParts = table.split(".");
                                                    if (tableParts.length == 2) {
                                                        schemaName = tableParts[0];
                                                    }
                                                }
                                            }

                                        }
                                    }
                                }
                            }
                        }

                    }
                }

                objOut["interfaceName"] = interfaceName;
                objOut["schemaName"] = schemaName;
                objOut;


              script: |-
                var objTmp = JSON.parse(objStr);
                var levels = [].concat(objTmp.levels);
                var actorInputs = [];
                var objOut = {};
                var interfaceName = '';
                var schemaName = '';

                for (var i = 0; i < levels.length; i++) {
                  var objStage = levels[i].stages; // Find Source stage

                  for (var y = 0; y < objStage.length; y++) {
                    print("Stage Name: " + objStage[y].name);

                    if (objStage[y].name == 'Source') {
                      for (var a = 0; a < objStage[y].actors.length; a++) {
                        print("Actor Type: " + objStage[y].actors[a].actorType.parentType);

                        if (objStage[y].actors[a].actorType.parentType == 'SourceDbQuery') {
                          print("In the right actor");
                          actorInputs = [].concat(objStage[y].actors[a].actorType.inputs);

                          for (var j = 0; j < actorInputs.length; j++) {
                            print("Input Param Name: " + actorInputs[j].name);
                            print("Input Param value: " + actorInputs[j].const);

                            if (actorInputs[j].name == 'interface') {
                              interfaceName = actorInputs[j].const;
                            } else if (actorInputs[j].name == 'sql') {
                              var select = actorInputs[j].const;
                              var table = select.match(/(from)\s+(\w+\.\w+)/g) + '';
                              print("Table before split: " + table);

                              if (table != null) {
                                table = table.split(" ")[1];
                                print("Table: " + table);

                                if (table != null) {
                                  var tableParts = table.split(".");

                                  if (tableParts.length == 2) {
                                    schemaName = tableParts[0];
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }

                objOut["interfaceName"] = interfaceName;
                objOut["schemaName"] = schemaName;
                objOut;
          objStr:
            link: JsonStringify1/string
            schema: '#ref'
            mandatory: false
        out:
          result:
            schema: '#ref'
  Stage 9:
    actors:
      createRootTablePopulation1:
        parent: InnerFlow
        in:
          flowName:
            const: createRootTablePopulation
          LU_NAME:
            external: luName
            schema: string
            mandatory: false
          TABLE_NAME:
            link: Get Main TableName/result
            schema: string
            mandatory: false
          TABLE_KEY:
            link: Get Main Table key/result
            schema: string
            mandatory: false
          SOURCE_INTERFACE:
            link: JavaScript1/result/interfaceName
            schema: string
            mandatory: false
          SOURCE_SCHEMA:
            link: JavaScript1/result/schemaName
            schema: string
            mandatory: false
          SOURCE_TABLE:
            link: Get Main TableName/result
            schema: string
            mandatory: false
          LU_PATH:
            external: LuFolder
            schema: string
            mandatory: false
          POPULATION_FLOW_NAME:
            link:
              path: ls1/result/name
              iterate: Iterate
            schema: string
            mandatory: false
schemas:
  ls1.out.result:
    type: array
    items:
      type: object
      properties:
        name:
          type: string
        size:
          type: integer
        createTime:
          type: integer
        lastModifiedTime:
          type: integer
        lastAccessTime:
          type: integer
        directory:
          type: boolean
  JsonParser1.out.object:
    type: object
    properties:
      tags:
        type: array
        items:
          type: string
      levels:
        type: array
        items:
          type: object
          properties:
            stages:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  dependsOnList:
                    type: array
                    items: {
                      }
                  isLast:
                    type: integer
                  isTransactional:
                    type: boolean
                  actors:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        actorType:
                          type: object
                          properties:
                            parentType:
                              type: string
                            readOnly:
                              type: boolean
                            inputs:
                              type: array
                              items:
                                type: object
                                properties:
                                  name:
                                    type: string
                                  schema:
                                    type: object
                                    properties: {
                                      }
                            outputs:
                              type: array
                              items:
                                type: object
                                properties:
                                  name:
                                    type: string
                                  schema:
                                    type: object
                                    properties:
                                      type:
                                        type: string
                                      items:
                                        type: object
                                        properties:
                                          type:
                                            type: string
                                          properties:
                                            type: object
                                            properties:
                                              customer_id:
                                                type: object
                                                properties:
                                                  type:
                                                    type: string
      connections:
        type: array
        items:
          type: object
          properties:
            leftPort:
              type: object
              properties:
                actor:
                  type: string
                name:
                  type: string
            rightPort:
              type: object
              properties:
                actor:
                  type: string
                name:
                  type: string
  JavaScript1.in.objStr:
    type: array
    items:
      type: blob
  JavaScript1.out.result:
    type: object
    properties:
      interfaceName:
        type: string
      schemaName:
        type: string
