tags: CleanUp,TDM
stages:
  Start:
    remark: CleanALL indicator cleans all previous AI executions if set to TRUE !
    actors:
      AI_DB_K2SYSTEM:
        parent: FabricSetRead
        in:
          key:
            const: AI_DB_INTERFACE
            default: false
      Get k2system Schema Name:
        parent: InnerFlow
        in:
          flowName:
            const: Getk2SystemSchemaName
        out:
          result:
            schema: string
      AI_DB_ENTITIES:
        parent: FabricSetRead
        in:
          key:
            const: AI_DB_INTERFACE
  Get the TrainingExecutionIDs:
    transactional: false
    actors:
      Get IDS:
        parent: Const
        in:
          value:
            const: null
            external: TrainingExecutionIDs
        out:
          value:
            schema: '#ref'
      namespaces:
        parent: Const
        in:
          value:
            const: null
            external: namespaces
        out:
          value:
            schema: '#ref'
  Get The Namespaces:
    transactional: false
    actors:
      kubeGetNamespaceJobNames:
        parent: InnerFlow
        in:
          flowName:
            const: kubeGetNamespaceJobNames
          namespace:
            link:
              path: namespaces/value
              iterate: Iterate
            schema: string
            mandatory: false
        out:
          array:
            schema: '#ref'
  'Training Job     ':
    transactional: false
    dependsOn: Get The Namespaces
    actors:
      Training Job:
        parent: EqualsIgnoreCase
        condition: result
        in:
          b:
            const: training-job
            schema: string
          a:
            link:
              path: kubeGetNamespaceJobNames/array
              iterate: Iterate
      Training ID:
        parent: ToString
        in:
          value:
            link:
              path: Get IDS/value
              iterate: Iterate
    split: '--------------------'
  'Generation Job    ':
    else: true
    transactional: false
    dependsOn: Get The Namespaces
    actors:
      Regex:
        parent: Regex
        in:
          pattern:
            const: generation-job(\d+)
          input:
            link:
              path: kubeGetNamespaceJobNames/array
              iterate: Iterate
  Build The IDs String Array:
    last: 1
    transactional: false
    actors:
      'StringBuild ':
        parent: StringBuild
        in:
          input:
            link:
            - path: Training ID/string
              pos: 0
            - path: Regex/strings
              pos: 0
  Get ALL IDS:
    transactional: false
    actors:
      get ids:
        parent: DbCommand
        in:
          interface:
            const: null
            link: AI_DB_K2SYSTEM/result
          sql:
            const: select iid,schema from ${@k2systemName}.entity_list where task_execution_id::BIGINT
              = ANY(string_to_array(${task_exe_id}, ',')::BIGINT[])
          task_exe_id:
            link: StringBuild /string
            schema: string
            mandatory: false
          k2systemName:
            link: Get k2system Schema Name/result
            schema: string
            mandatory: false
        out:
          result:
            schema: '#ref'
  Get Root:
    transactional: false
    actors:
      DbFetchFirstRow ROOT TABLE:
        parent: DbFetchFirstRow
        in:
          interface:
            const: null
            link: AI_DB_ENTITIES/result
          sql:
            const: |-
              SELECT DISTINCT
                  relname AS root_table
              FROM
                  pg_class
              WHERE
                  oid NOT IN (
                      SELECT
                          conrelid
                      FROM
                          pg_constraint
                      WHERE
                          contype = 'f'
                      AND
                          connamespace = (SELECT oid FROM pg_namespace WHERE nspname = '${@schemaName}')  -- Replace 'your_schema_name' with your schema name
                  )
              AND
                  relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = '${@schemaName}')  -- Replace 'your_schema_name' with your schema name
              AND
                  oid NOT IN (
                      SELECT DISTINCT
                          conrelid
                      FROM
                          pg_constraint
                      WHERE
                          contype = 'f'
                      AND
                          connamespace = (SELECT oid FROM pg_namespace WHERE nspname = '${@schemaName}')  -- Replace 'your_schema_name' with your schema name
                  )
              AND
                  relkind = 'r'
                  AND relname NOT LIKE '_k2\_%'   -- Excluding specific tables
              ORDER BY
                  relname;
          schemaName:
            link:
              path: get ids/result/schema
              iterate: Iterate
            schema: string
            mandatory: false
        out:
          result:
            schema: '#ref'
  'Delete ALL Entities ':
    last: 1
    transactional: false
    actors:
      Delete Exported To DB:
        parent: DbCommand
        in:
          interface:
            const: null
            link: AI_DB_ENTITIES/result
          sql:
            const: 'delete from ${@schemaName}.${@tableName} where __iid=${imported_iid} '
          schemaName:
            link:
              path: get ids/result/schema
              iterate: Iterate
            schema: string
            mandatory: false
          tableName:
            link: DbFetchFirstRow ROOT TABLE/result/root_table
            schema: string
            mandatory: false
          imported_iid:
            link:
              path: get ids/result/iid
              iterate: Iterate
            schema: string
            mandatory: false
  'Delete from K2system Tables   ':
    transactional: false
    actors:
      task_execution_stats by id:
        parent: DbCommand
        in:
          interface:
            const: null
            link: AI_DB_K2SYSTEM/result
          sql:
            const: delete from ${@k2systemName}.task_execution_stats where task_execution_id::BIGINT
              = ANY(string_to_array(${task_exe_id}, ',')::BIGINT[])
          task_exe_id:
            link: StringBuild /string
            schema: string
            mandatory: false
          k2systemName:
            link: Get k2system Schema Name/result
            schema: string
            mandatory: false
  Delete from K2system Tables:
    transactional: false
    actors:
      entity_list by id:
        parent: DbCommand
        in:
          interface:
            const: null
            link: AI_DB_K2SYSTEM/result
          sql:
            const: delete from ${@k2systemName}.entity_list where task_execution_id::BIGINT
              = ANY(string_to_array(${task_exe_id}, ',')::BIGINT[])
          task_exe_id:
            link: StringBuild /string
            schema: string
            mandatory: false
          k2systemName:
            link: Get k2system Schema Name/result
            schema: string
            mandatory: false
  'Delete from K2system Tables                     ':
    transactional: false
    actors:
      task_executions by id:
        parent: DbCommand
        in:
          interface:
            const: null
            link: AI_DB_K2SYSTEM/result
          sql:
            const: |
              delete from ${@k2systemName}.task_executions where id::BIGINT = ANY(string_to_array(${task_exe_id}, ',')::BIGINT[])
          task_exe_id:
            link: StringBuild /string
            schema: string
            mandatory: false
          k2systemName:
            link: Get k2system Schema Name/result
            schema: string
            mandatory: false
  'Namespace doesn''t exists        ':
    dependsOn: 'Delete from K2system Tables                     '
    actors:
      IsNull:
        parent: IsNull
        condition: result
        in:
          value:
            link:
              path: namespaces/value
              iterate: Iterate
    split: '--------------------'
  Delete Namespaces:
    else: true
    dependsOn: 'Delete from K2system Tables                     '
    actors:
      kubeDeleteNamespace11:
        parent: InnerFlow
        in:
          flowName:
            const: kubeDeleteNamespace
          namespace:
            link:
              path: namespaces/value
              iterate: Iterate
            schema: string
            mandatory: false
schemas:
  Get IDS.out.value:
    type: array
    items:
      type: integer
  namespaces.out.value:
    type: array
    items:
      type: string
  kubeGetNamespaceJobNames.out.array:
    type: array
    items:
      type: string
  get ids.out.result:
    type: array
    items:
      type: object
      properties:
        iid:
          type: string
        schema:
          type: string
  DbFetchFirstRow ROOT TABLE.out.result:
    type: object
    properties:
      root_table:
        type: string
