tags: TDM
stages:
  Get Filter Out Tables:
    actors:
      flowArgsmatchFound = false;:
        parent: JavaScript
        in:
          script:
            const: flowArgs.matchFound = false;
        out:
          result:
            schema: boolean
      indicator:
        parent: Const
        in:
          value:
            const: null
            external: indicator
        out:
          value:
            schema: string
  Excluded Fields and Tables:
    dependsOn: Get Filter Out Tables
    actors:
      Excluded:
        parent: EqualsIgnoreCase
        condition: result
        in:
          b:
            const: excluded
            schema: string
          a:
            link: indicator/value
    split: '--------------------'
  Included Fields and Tables:
    else: true
    dependsOn: Get Filter Out Tables
    actors:
      Included:
        parent: Const
        in:
          value:
            const: 'true'
            schema: string
        out:
          value:
            schema: string
  Lookup with Excluded:
    dependsOn: Excluded Fields and Tables
    actors:
      MTableLookup1:
        parent: MTableLookup
        in:
          mtable:
            const: AITableFieldsInclusion
          excluded:
            link: Excluded/result
            schema: boolean
            editor:
              id: com.k2view.mTableKey
            mandatory: false
        out:
          result:
            schema: '#ref'
    split: '--------------------'
  Lookup with Included:
    dependsOn: Included Fields and Tables
    actors:
      MTableLookup2:
        parent: MTableLookup
        in:
          mtable:
            const: AITableFieldsInclusion
          included:
            link: Included/value
            schema: string
            editor:
              id: com.k2view.mTableKey
            mandatory: false
        out:
          result:
            schema: '#ref'
  Return If Match:
    actors:
      'JavaScript         ':
        parent: JavaScript
        in:
          script:
            const:
              userCode: |
                const filteredTables = [];
                for (let i = 0; i < tables.length; i++) {
                    const name = names[i] !== null ? names[i].toLowerCase() : null;
                    const active = actives[i];
                    const table = tables[i] !== null ? tables[i].toLowerCase() : null;
                    const column = columns[i] !== null ? columns[i].toLowerCase() : null;

                    if (active && (name === "all_lus" || (lu !== null && name === lu.toLowerCase()))) {
                        if (column === null) {
                            filteredTables.push(table);
                        } else {
                            filteredTables.push(`${table}.${column}`);
                        }
                    }
                }
                filteredTables;
              script: |-
                var filteredTables = [];

                for (var i = 0; i < tables.length; i++) {
                  var name = names[i] !== null ? names[i].toLowerCase() : null;
                  var active = actives[i];
                  var table = tables[i] !== null ? tables[i].toLowerCase() : null;
                  var column = columns[i] !== null ? columns[i].toLowerCase() : null;

                  if (active && (name === "all_lus" || lu !== null && name === lu.toLowerCase())) {
                    if (column === null) {
                      filteredTables.push(table);
                    } else {
                      filteredTables.push(table + "." + column);
                    }
                  }
                }

                filteredTables;
          lu:
            external: luName
            schema: string
            mandatory: false
          names:
            link:
            - MTableLookup1/result/lu_name
            - MTableLookup2/result/lu_name
            schema: string
            mandatory: false
          actives:
            link:
            - MTableLookup1/result/active
            - MTableLookup2/result/active
            schema: boolean
            mandatory: false
          tables:
            link:
            - MTableLookup1/result/table_name
            - MTableLookup2/result/table_name
            schema: string
            mandatory: false
          columns:
            link:
            - MTableLookup1/result/column_name
            - MTableLookup2/result/column_name
            schema: '#ref'
            mandatory: false
        out:
          result:
            schema: '#ref'
  Check If Match:
    actors:
      'Uppercase  ':
        parent: Uppercase
        in:
          string:
            link:
              path: JavaScript         /result
              iterate: Iterate
      'Uppercase ':
        parent: Uppercase
        in:
          string:
            external: tableName
  Pattern:
    actors:
      Regex:
        parent: Regex
        in:
          pattern:
            const: null
            link: Uppercase  /string
          input:
            link: Uppercase /string
        out:
          strings:
            schema: string
  Match Found:
    last: 1
    actors:
      'JavaScript   ':
        parent: JavaScript
        in:
          script:
            const: |-
              if (match != '[]' && flowArgs.matchFound == false) {
                  flowArgs.matchFound = true;
              }
              flowArgs.matchFound
          match:
            link: Regex/strings
            schema: string
          luType:
            external: luName
            schema: string
        out:
          result:
            schema: boolean
  'True':
    dependsOn: Match Found
    actors:
      Not:
        parent: Not
        condition: result
        in:
          value:
            link: JavaScript   /result
      check for dot:
        parent: Replace
        in:
          search:
            const: \b\S*\.\S*\b
          replace:
            const: 'true'
          string:
            link: Uppercase  /string
    split: '--------------------'
  'False':
    else: true
    transactional: false
    dependsOn: Match Found
    actors:
      tableName:
        parent: Const
        in:
          value:
            const: null
            external: tableName
            schema: string
        out:
          value:
            external: tableNameOut
            schema: string
  Table and Column Name:
    dependsOn: 'True'
    actors:
      found:
        parent: EqualsIgnoreCase
        condition: result
        in:
          b:
            const: 'true'
            schema: string
          a:
            link: check for dot/string
      TableAndColumn:
        parent: Const
        in:
          value:
            const: null
            link: Uppercase  /string
            schema: string
        out:
          value:
            external: tableNameOut
            schema: string
    split: '--------------------'
  'Do Nothing  ':
    else: true
    dependsOn: 'True'
    split: '--------------------'
  Do Nothing:
    dependsOn: 'False'
schemas:
  MTableLookup1.out.result:
    type: array
    items:
      type: object
      properties:
        lu_name:
          type: string
        table_name:
          type: string
        column_name: {
          }
        included:
          type: string
        excluded:
          type: string
        active:
          type: string
  MTableLookup2.out.result:
    type: array
    items:
      type: object
      properties:
        lu_name:
          type: string
        table_name:
          type: string
        column_name: {
          }
        included:
          type: string
        excluded:
          type: string
        active:
          type: string
  JavaScript         .in.columns:
    type: array
    items: {
      }
  JavaScript         .out.result:
    type: array
    items:
      type: string
