tags: TDM,TDMAI MLTraining
stages:
  Stage 1:
    actors:
      luName:
        parent: Const
        in:
          value:
            const: null
            external: luName
        out:
          value:
            schema: string
  Stage 2:
    actors:
      Special Fields:
        parent: MTableLookup
        in:
          mtable:
            const: TrainingSpecialFields
          lu_name:
            link: luName/value
            schema: string
            mandatory: false
        out:
          result:
            schema: '#ref'
  Stage 3:
    actors:
      Build Special Fields:
        parent: JavaScript
        in:
          script:
            const:
              userCode: "function processObjIn(objIn, luName) {\r\n    if (objIn.length\
                \ === 0) {\r\n        return null;\r\n    }\r\n\r\n    var arrTmp\
                \ = [...objIn];\r\n    var objOut = {};\r\n    var objTmp = {};\r\n\
                \    var prevTableName = \"\";\r\n\r\n    for (var i = 0; i < arrTmp.length;\
                \ i++) {\r\n        var tableName = arrTmp[i].table_name;\r\n    \
                \    var columnName = arrTmp[i].column_name;\r\n        var indicator\
                \ = arrTmp[i].indicator;\r\n        var active = arrTmp[i].active;\r\
                \n\r\n        if (active.toLowerCase() == \"true\") {\r\n        \
                \    if (prevTableName != tableName) {\r\n                objTmp =\
                \ {};\r\n                prevTableName = tableName;\r\n          \
                \  }\r\n\r\n            objTmp[columnName] = indicator.toLowerCase()\
                \ == \"true\" ? true : false;\r\n            objOut[luName.toLowerCase()\
                \ + \".\" + tableName] = objTmp;\r\n        }\r\n    }\r\n\r\n   \
                \ if (Object.keys(objOut).length > 0) {\r\n        return objOut;\r\
                \n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n// Usage\r\
                \nvar result = processObjIn(objIn, luName);\r\nresult;"
              script: |-
                function processObjIn(objIn, luName) {
                  if (objIn.length === 0) {
                    return null;
                  }

                  var arrTmp = [].concat(objIn);
                  var objOut = {};
                  var objTmp = {};
                  var prevTableName = "";

                  for (var i = 0; i < arrTmp.length; i++) {
                    var tableName = arrTmp[i].table_name;
                    var columnName = arrTmp[i].column_name;
                    var indicator = arrTmp[i].indicator;
                    var active = arrTmp[i].active;

                    if (active.toLowerCase() == "true") {
                      if (prevTableName != tableName) {
                        objTmp = {};
                        prevTableName = tableName;
                      }

                      objTmp[columnName] = indicator.toLowerCase() == "true" ? true : false;
                      objOut[luName.toLowerCase() + "." + tableName] = objTmp;
                    }
                  }

                  if (Object.keys(objOut).length > 0) {
                    return objOut;
                  } else {
                    return null;
                  }
                } // Usage


                var result = processObjIn(objIn, luName);
                result;
          objIn:
            link: Special Fields/result
            schema: '#ref'
            mandatory: false
          luName:
            link: luName/value
            schema: string
            mandatory: false
        out:
          result:
            external: specialFields
            schema: '#ref'
      Build Mapping Table:
        parent: JavaScript
        in:
          script:
            const:
              userCode: "function processObjIn(objIn, luName) {\r\n    if (objIn.length\
                \ === 0) {\r\n        return null;\r\n    }\r\n    var arrTmp = [...objIn];\r\
                \n    var objOut = {};\r\n    var objTmp = [];\r\n    var prevTableName\
                \ = \"\";\r\n\r\n    for(var i=0; i<arrTmp.length; i++) {\r\n    \
                \    var tableName = arrTmp[i].table_name;\r\n        var columnName\
                \ = arrTmp[i].column_name;\r\n        var active = arrTmp[i].active;\r\
                \n\r\n        if(prevTableName!=tableName) {\r\n            objTmp=[];\r\
                \n            prevTableName=tableName;\r\n        }\r\n\r\n      \
                \  if(active.toLowerCase()==\"true\") {\r\n            objTmp.push(columnName);\r\
                \n            objOut[((luName.toLowerCase())+\".\"+tableName)] = objTmp;\r\
                \n        }\r\n    }\r\n\r\n    if(Object.keys(objOut).length>0) {\r\
                \n        var out = {};\r\n        out[\"mapping_table_columns\"]=objOut;\r\
                \n        //out;\r\n        return objOut;\r\n    } else {\r\n   \
                \     return null;\r\n    }\r\n}\r\nvar result = processObjIn(objIn,\
                \ luName);\r\nresult;"
              script: |-
                function processObjIn(objIn, luName) {
                  if (objIn.length === 0) {
                    return null;
                  }

                  var arrTmp = [].concat(objIn);
                  var objOut = {};
                  var objTmp = [];
                  var prevTableName = "";

                  for (var i = 0; i < arrTmp.length; i++) {
                    var tableName = arrTmp[i].table_name;
                    var columnName = arrTmp[i].column_name;
                    var active = arrTmp[i].active;

                    if (prevTableName != tableName) {
                      objTmp = [];
                      prevTableName = tableName;
                    }

                    if (active.toLowerCase() == "true") {
                      objTmp.push(columnName);
                      objOut[luName.toLowerCase() + "." + tableName] = objTmp;
                    }
                  }

                  if (Object.keys(objOut).length > 0) {
                    var out = {};
                    out["mapping_table_columns"] = objOut; //out;

                    return objOut;
                  } else {
                    return null;
                  }
                }

                var result = processObjIn(objIn, luName);
                result;
          objIn:
            const: ''
            schema: '#ref'
            mandatory: false
          luName:
            link: luName/value
            schema: string
            mandatory: false
        out:
          result:
            external: mappingTables
            schema: '#ref'
schemas:
  Special Fields.out.result:
    type: array
    items:
      type: object
      properties:
        lu_name:
          type: string
        table_name:
          type: string
        column_name:
          type: string
        indicator:
          type: string
        active:
          type: string
  Build Special Fields.in.objIn:
    type: object
    properties:
      lu_name:
        type: string
      table_name:
        type: string
      column_name:
        type: string
      indicator:
        type: string
      active:
        type: string
  Build Special Fields.out.result:
    type: array
    items:
      type: object
      properties:
        lu_name:
          type: string
        table_name:
          type: string
        column_name:
          type: string
        indicator:
          type: string
        active:
          type: string
  Build Mapping Table.in.objIn:
    type: object
    properties:
      lu_name:
        type: string
      table_name:
        type: string
      column_name:
        type: string
      indicator:
        type: string
      active:
        type: string
  Build Mapping Table.out.result:
    type: array
    items:
      type: object
      properties:
        lu_name:
          type: string
        table_name:
          type: string
        column_name:
          type: string
        indicator:
          type: string
        active:
          type: string
